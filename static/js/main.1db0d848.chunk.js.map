{"version":3,"sources":["components/UserSearch/UserSearch.js","components/Game/Game.js","components/AchList/AchList.js","containers/App.js","serviceWorker.js","index.js"],"names":["UserSearch","setGamerTag","getAchievements","className","type","placeholder","onChange","value","onClick","Game","id","name","currentGS","maxGS","pct","style","width","AchList","achievements","map","game","key","titleId","currentGamerscore","totalGamerscore","maxGamerscore","App","event","setState","gamerTag","target","getGamerTagId","a","fetch","state","method","headers","then","response","json","gTagId","gamerTagId","catch","err","console","log","getAchievementData","resp","data","titles","achList","forEach","push","filteredGames","this","filter","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1db0d848.chunk.js","sourcesContent":["import React from 'react';\nimport './UserSearch.css';\n\nconst UserSearch = ({ setGamerTag, getAchievements }) => {\n\treturn (\n\t\t<div>\n      <input className='searchBox' type ='search' placeholder='search gamertag' onChange={setGamerTag}/>\n      <input className='searchButton' type=\"submit\" value=\"Search\" onClick={getAchievements} />\n\t\t</div>\n\t)\n}\n\nexport default UserSearch;\n","import React from 'react';\nimport './Game.css';\n\nconst Game = ({ id, name, currentGS, maxGS }) => {\nconst pct = (currentGS/maxGS) * 100;\n\n\treturn (\n\t\t<div id={id} className='game'>\n\t\t\t<h2>{name}</h2>\n\t\t\t<h3>{currentGS}/{maxGS}</h3>\n\t\t\t<hr style={{width: `${pct}%`}}/>\n\t\t</div>\n\t)\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from '../Game/Game';\n\nconst AchList = ({ achievements }) => {\n\treturn (\n\t\t<div id='achList'>\n\t\t\t{\n\t\t\t\tachievements.map((game) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Game\n\t\t\t\t\t\t\tkey={game.titleId}\n\t\t\t\t\t\t\tid={game.titleId}\n\t\t\t\t\t\t\tname={game.name}\n\t\t\t\t\t\t\tcurrentGS = {game.currentGamerscore}\n\t\t\t\t\t\t\tmaxGS = {game.totalGamerscore ? game.totalGamerscore : game.maxGamerscore}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default AchList;\n","import React, { Component } from 'react';\nimport UserSearch from '../components/UserSearch/UserSearch';\nimport AchList from '../components/AchList/AchList';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gamerTag: '',\n      gamerTagId: '',\n      achievements: []\n    }\n  }\n\n  setGamerTag = (event) => {\n    this.setState({gamerTag: event.target.value});\n  }\n\n  getGamerTagId = async () => {\n    await fetch(`/v2/xuid/${this.state.gamerTag}`, {\n      method: 'get',\n      headers: {\n        'X-AUTH': '3a5eb14d1a580dc2d1a0e9b10b31fa5cc5958616',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(gTagId => {\n        this.setState({gamerTagId: gTagId});\n    })\n    .catch(err => {\n      console.log(\"Error getting gamertag id.\");\n    });\n  }\n\n  getAchievementData = async (type) => {\n    const resp = await fetch(`/v2/${this.state.gamerTagId}/${type}games`, {\n      method: 'get',\n      headers: {\n        'X-AUTH': '3a5eb14d1a580dc2d1a0e9b10b31fa5cc5958616',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    const data = await resp.json();\n\n    return data.titles;\n  }\n\n  getAchievements = async () => {\n    // Reset state when executing new searches.\n    if (this.state.gamerTagId) this.setState({gamerTagId: ''});\n    let achList = [];\n    await this.getGamerTagId();\n    if (this.state.gamerTagId) {\n      console.log('Gamertag found. Obtaining achievements...');\n\n      await this.getAchievementData('xbox360').then(resp => {\n        resp.forEach(game => {\n          achList.push(game);\n        })\n      });\n\n      await this.getAchievementData('xboxone').then(resp => {\n        resp.forEach(game => {\n          achList.push(game);\n        })\n      });\n\n      this.setState({achievements: achList});\n\n    }\n    else {\n      console.log('Gamertag not found. No gamertag id to use.')\n    }\n  }\n\n  render() {\n    const filteredGames = this.state.achievements.filter(game => game.currentGamerscore > 0);\n\n    return (\n      <div className=\"App\">\n        <h1>SEE YO CHEEVOS</h1>\n        <UserSearch setGamerTag={this.setGamerTag} getAchievements={this.getAchievements} />\n        {this.state.achievements.length > 0 ?\n          <AchList achievements={filteredGames} /> :\n          <div id=\"placeholder\"></div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}